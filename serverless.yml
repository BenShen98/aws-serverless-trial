service: wide-rides # NOTE: update this with your service name


provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  #  include:
  #    - include-me.js
  #    - include-me-dir/**
  exclude:
    - front-end/**
    - .git/**
    - .idea/**

functions:
  RequestUnicorn:
    handler: handler.handler
    role: WildRydesLambdaRole
    events:
      - http:
          path: ride
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: WildRydesApiGatewayAuthorizer

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    WildRydesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName:  wildrydes-ben

    WildRydesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: 'WildRydesBucket'
        PolicyDocument:
          Statement:
            - Effect: 'Allow'
              Principal: '*'
              Action:
                - 's3:GetObject'
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: 'WildRydesBucket'
                    - '/*'
    WildRydesCognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: WildRydes
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false

    WildRydesCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: WildRydesWebApp
        GenerateSecret: false
        UserPoolId:
          Ref: 'WildRydesCognitoUserPool'

    WildRydesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Rides
        AttributeDefinitions:
          - AttributeName: RideId
            AttributeType: S
        KeySchema:
          - AttributeName: RideId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    WildRydesLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: WildRydesLambda
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: DynamoDBWriteAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    'Fn::GetAtt': [WildRydesDynamoDBTable, Arn]

##### code for part 2 of https://hands-on.cloud/serverless-framework-building-web-app-using-aws-lambda-amazon-api-gateway-s-3-dynamo-db-and-cognito-part-2
    # `ApiGatewayRestApi` is generated by sls, can be found in ./.serverless/...
    WildRydesApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: WildRydes
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [WildRydesCognitoUserPool, Arn]
        IdentitySource: method.request.header.Authorization


###### may not necessary? created by sls?
###### code below are for part-1 of https://hands-on.cloud/serverless-framework-building-web-app-using-aws-lambda-amazon-api-gateway-s-3-dynamo-db-and-cognito-part-2
#    WildRydesApiGatewayRestApi:
#      Type: AWS::ApiGateway::RestApi
#      Properties:
#        Name: WildRydes
#        EndpointConfiguration:
#          Types:
#            - EDGE
#
#    WildRydesApiGatewayAuthorizer:
#      Type: AWS::ApiGateway::Authorizer
#      Properties:
#        Name: WildRydes
#        RestApiId:
#          Ref: WildRydesApiGatewayRestApi
#        Type: COGNITO_USER_POOLS
#        ProviderARNs:
#          - Fn::GetAtt: [WildRydesCognitoUserPool, Arn]
#        IdentitySource: method.request.header.Authorization
#
#    WildRydeApiGatewayRidesResource:
#      Type: AWS::ApiGateway::Resource
#      Properties:
#        ParentId:
#          Fn::GetAtt: [WildRydesApiGatewayRestApi, RootResourceId]
#        PathPart: ride
#        RestApiId:
#          Ref: WildRydesApiGatewayRestApi
#
#    #CORS https://stackoverflow.com/questions/40292888/enable-cors-for-api-gateway-in-cloudformation-template
#    WildRydesRideOptionsMethod:
#      Type: AWS::ApiGateway::Method
#      Properties:
#        AuthorizationType: NONE
#        RestApiId:
#          Ref: WildRydesApiGatewayRestApi
#        ResourceId:
#          Ref: WildRydeApiGatewayRidesResource
#        HttpMethod: OPTIONS
#        Integration:
#          IntegrationResponses:
#            - StatusCode: 200
#              ResponseParameters:
#                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
#                method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
#                method.response.header.Access-Control-Allow-Origin: "'*'"
#              ResponseTemplates:
#                application/json: ''
#          PassthroughBehavior: WHEN_NO_MATCH
#          RequestTemplates:
#            application/json: '{"statusCode": 200}'
#          Type: MOCK
#        MethodResponses:
#          - StatusCode: 200
#            ResponseModels:
#              application/json: 'Empty'
#            ResponseParameters:
#              method.response.header.Access-Control-Allow-Headers: false
#              method.response.header.Access-Control-Allow-Methods: false
#              method.response.header.Access-Control-Allow-Origin: false
#
#    WildRydesRidePostMethod:
#      Type: AWS::ApiGateway::Method
#      Properties:
#        AuthorizerId:
#          Ref: WildRydesApiGatewayAuthorizer
#        AuthorizationType: COGNITO_USER_POOLS
#        HttpMethod: POST
#        ResourceId:
#          Ref: WildRydeApiGatewayRidesResource
#        RestApiId:
#          Ref: WildRydesApiGatewayRestApi
#        Integration:
#          Type: AWS_PROXY
#          IntegrationHttpMethod: POST
#          Uri:
#            Fn::Join:
#              - ':'
#              - - 'arn:aws:apigateway'
#                - Ref: 'AWS::Region'
#                - 'lambda'
#                - Fn::Join:
#                    - '/'
#                    - - 'path'
#                      - '2015-03-31'
#                      - 'functions'
#                      - Fn::GetAtt: [RequestUnicornLambdaFunction, Arn]
#                      - 'invocations'
#    WildRydesApiGatewayDeployment:
#      Type: AWS::ApiGateway::Deployment
#      Properties:
#        Description: Wild Rydes Api
#        RestApiId:
#          Ref: WildRydesApiGatewayRestApi
#        StageName: ${opt:stage, 'dev'}




  Outputs:
    WildRydesBucketURL:
      Description: "Wild Rydes Bucket Website URL"
      Value:
        "Fn::GetAtt": [ WildRydesBucket, WebsiteURL ]

#    WildRydesApiGatewayUrl:
#      Description: 'Wild Rydes Api Gateway URL'
#      Value:
#        'Fn::Join':
#          - ''
#          - - 'https://'
#            - Ref: 'WildRydesApiGatewayRestApi'
#            - '.execute-api.'
#            - Ref: 'AWS::Region'
#            - '.amazonaws.com'
#            - "/${opt:stage, 'dev'}"

    WildRydesCognitoUserPoolId:
      Description: 'Wild Rydes Cognito User Pool ID'
      Value:
        Ref: 'WildRydesCognitoUserPool'
    WildRydesCognitoUserPoolClientId:
      Description: 'Wild Rydes Cognito User Pool Client ID'
      Value:
        Ref: 'WildRydesCognitoUserPoolClient'

    WildRydesDynamoDbARN:
      Description: 'Wild Rydes DynamoDB ARN'
      Value:
        'Fn::GetAtt': [WildRydesDynamoDBTable, Arn]
